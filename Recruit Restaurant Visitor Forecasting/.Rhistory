fcast <- predict(proph, future)
fcast
}
temp <- predict_future(air_id)
temp
temp[1]
temp[1,]
temp[2:3]
temp[2:3,]
temp[-1,]
temp[-1:1,]
temp[-1:0,]
?slice
slice(temp, test_len:n())
slice(temp, (n()-test_len):n())
View(test)
slice(temp, (n()-test_len+1):n())
a =slice(temp, (n()-test_len+1):n())
View(a)
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len):n()) %>%
select(yhat)
}
temp <- predict_future(air_id)
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len+1):n()) %>%
select(yhat)
}
temp <- predict_future(air_id)
View(test)
temp
typeof(temp)
test
?separate
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len+1):n()) %>%
select(yhat)
}
test %>%
separate(id, c("air","store_id","date"), sep="_") %>%
unite("air", "store", sep="_")
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len+1):n()) %>%
select(yhat)
}
test %>%
separate(id, c("air","store_id","date"), sep="_") %>%
unite("air", "store_id", sep="_")
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len+1):n()) %>%
select(yhat)
}
test %>%
separate(id, c("air","store_id","date"), sep="_") %>%
mutate(store=unite("air", "store_id", sep="_"))
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len+1):n()) %>%
select(yhat)
}
test %>%
separate(id, c("air","store_id","date"), sep="_") %>%
mutate(unite("air", "store_id", sep="_"))
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len+1):n()) %>%
select(yhat)
}
test %>%
separate(id, c("air","store_id","date"), sep="_") %>%
unite("name",c("air", "store_id"), sep="_")
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len+1):n()) %>%
select(yhat)
}
test %>%
separate(id, c("air","store_id","date"), sep="_") %>%
unite("name",c("air", "store_id"), sep="_") %>%
distinct(name)
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len+1):n()) %>%
select(yhat)
}
store_name <- test %>%
separate(id, c("air","store_id","date"), sep="_") %>%
unite("name",c("air", "store_id"), sep="_") %>%
distinct(name)
View(temp)
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len+1):n()) %>%
unite("id", c("store_id", ds), sep="_") %>%
mutate(vistors = yhat) %>%
select(id, vistors)
}
store_name <- test %>%
separate(id, c("air","store_id","date"), sep="_") %>%
unite("name",c("air", "store_id"), sep="_") %>%
distinct(name)
b = predict_future(air_id)
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len+1):n()) %>%
mutate(id = paste0(store_id, ds, collapse="_")) %>%
mutate(vistors = yhat) %>%
select(id, vistors)
}
store_name <- test %>%
separate(id, c("air","store_id","date"), sep="_") %>%
unite("name",c("air", "store_id"), sep="_") %>%
distinct(name)
b = predict_future(air_id)
View(b)
?paste0
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len+1):n()) %>%
mutate(id = paste(store_id, ds, sep="_")) %>%
mutate(vistors = yhat) %>%
select(id, vistors)
}
store_name <- test %>%
separate(id, c("air","store_id","date"), sep="_") %>%
unite("name",c("air", "store_id"), sep="_") %>%
distinct(name)
b = predict_future(air_id)
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len+1):n()) %>%
mutate(id = paste(store_id, ds, sep="_")) %>%
mutate(vistors = yhat) %>%
select(id, vistors)
}
store_name <- test %>%
separate(id, c("air","store_id","date"), sep="_") %>%
unite("name",c("air", "store_id"), sep="_") %>%
distinct(name)
#b = predict_future(air_id)
submit <- tibble(id, vistors)
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len+1):n()) %>%
mutate(id = paste(store_id, ds, sep="_")) %>%
mutate(vistors = yhat) %>%
select(id, vistors)
}
store_name <- test %>%
separate(id, c("air","store_id","date"), sep="_") %>%
unite("name",c("air", "store_id"), sep="_") %>%
distinct(name)
#b = predict_future(air_id)
submit <- tibble(id=c(), vistors=c())
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len+1):n()) %>%
mutate(id = paste(store_id, ds, sep="_")) %>%
mutate(vistors = yhat) %>%
select(id, vistors)
}
store_name <- test %>%
separate(id, c("air","store_id","date"), sep="_") %>%
unite("name",c("air", "store_id"), sep="_") %>%
distinct(name)
#b = predict_future(air_id)
submit <- tibble(id=list(), vistors=list())
a = list()
append()
?append
store_name
length(store_name)
nrow(store_name)
store_name[1]
store_name[1,]
typeof(store_name[1,])
a=typeof(store_name[1,])
a
a[1]
a[0]
a[[1]]
a
unlist(store_name[1,])
list.append(a,c(3))
a
a
a = list()
a
append(a, c)
append(a, 3)
a
a=append(a, 3)
a
a=append(a, "34")
a
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len+1):n()) %>%
mutate(id = paste(store_id, ds, sep="_")) %>%
mutate(vistors = yhat) %>%
select(id, vistors)
}
store_name <- test %>%
separate(id, c("air","store_id","date"), sep="_") %>%
unite("name",c("air", "store_id"), sep="_") %>%
distinct(name)
#b = predict_future(air_id)
result <- list()
for (i in 1:nrow(store_name)) {
store <- unlist(store_name[i,])
result <- append(result, predict_future(store))
}
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len+1):n()) %>%
mutate(id = paste(store_id, ds, sep="_")) %>%
mutate(vistors = yhat) %>%
select(id, vistors)
}
store_name <- test %>%
separate(id, c("air","store_id","date"), sep="_") %>%
unite("name",c("air", "store_id"), sep="_") %>%
distinct(name)
#b = predict_future(air_id)
result <- list()
for (i in 1:nrow(store_name)) {
store <- unlist(store_name[i,])
result <- append(result, predict_future(store))
}
bind_rows(result)
a=bind_rows(result)
View(a)
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len+1):n()) %>%
mutate(id = paste(store_id, ds, sep="_")) %>%
mutate(vistors = yhat) %>%
select(id, vistors)
}
store_name <- test %>%
separate(id, c("air","store_id","date"), sep="_") %>%
unite("name",c("air", "store_id"), sep="_") %>%
distinct(name)
#b = predict_future(air_id)
result <- list()
for (i in 1:nrow(store_name)) {
store <- unlist(store_name[i,])
result <- append(result, predict_future(store))
}
submit <- bind_rows(result)
submit
submit <- bind_rows(result)
View(submit)
result
library(data.table)
rbindlist(result)
rbind_list(result)
?bind_rows
?fwrite
predict_future <- function(store_id) {
foo <- air_visited %>%
filter(air_store_id == store_id)
visits_p <- foo %>%
right_join(all_visits, by="visit_date") %>%
mutate(visitors = log1p(visitors)) %>%
rownames_to_column() %>%
select(y = visitors, ds = visit_date)
proph <- prophet(visits_p, changepoint.prior.scale=0.5, yearly.seasonality=FALSE)
future <- make_future_dataframe(proph, periods = test_len)
fcast <- predict(proph, future)
fcast %>%
slice((n()-test_len+1):n()) %>%
mutate(id = paste(store_id, ds, sep="_")) %>%
mutate(vistors = yhat) %>%
select(id, vistors)
}
store_name <- test %>%
separate(id, c("air","store_id","date"), sep="_") %>%
unite("name",c("air", "store_id"), sep="_") %>%
distinct(name)
#b = predict_future(air_id)
for (i in 1:nrow(store_name)) {
store <- unlist(store_name[i,])
temp <- predict_future(store)
fwrite(temp, "submit.csv",append=T, sep=",")
}
library(installr)
install.packages("installr")
updateR()
R
version
install.packages('installr', dependencies=TRUE, repos='http://cran.rstudio.com/')
library(readr)
library(dplyr)
library(data.table)
library(tidyr)
library(tibble)
library(ggplot2)
library(lubridate)
library(tseries)
library(forecast)
library(prophet)
install.packages(c("car", "caret", "corrplot", "curl", "data.table", "digest", "dplyr", "foreach", "geosphere", "glue", "gridExtra", "hms", "htmlwidgets", "iterators", "knitr", "lazyeval", "lme4", "lubridate", "MASS", "mgcv", "quantreg", "raster", "Rcpp", "RcppEigen", "reshape2", "rlang", "rpart", "rprojroot", "rstan", "scales", "shiny", "sp", "StanHeaders", "stringi", "tibble", "tidyr", "TTR", "viridis", "viridisLite", "xgboost", "yaml"))
install.packages(c("car", "caret", "corrplot", "curl", "data.table", "digest", "dplyr", "foreach", "geosphere", "glue", "gridExtra", "hms", "htmlwidgets", "iterators", "knitr", "lazyeval", "lme4", "lubridate", "MASS", "mgcv", "quantreg", "raster", "Rcpp", "RcppEigen", "reshape2", "rlang", "rpart", "rprojroot", "rstan", "scales", "shiny", "sp", "StanHeaders", "stringi", "tibble", "tidyr", "TTR", "viridis", "viridisLite", "xgboost", "yaml"))
install.packages(c("car", "caret", "corrplot", "curl", "data.table", "digest", "dplyr", "foreach", "geosphere", "glue", "gridExtra", "hms", "htmlwidgets", "iterators", "knitr", "lazyeval", "lme4", "lubridate", "MASS", "mgcv", "quantreg", "raster", "Rcpp", "RcppEigen", "reshape2", "rlang", "rpart", "rprojroot", "rstan", "scales", "shiny", "sp", "StanHeaders", "stringi", "tibble", "tidyr", "TTR", "viridis", "viridisLite", "xgboost", "yaml"))
install.packages("quantreg")
install.packages("quantreg")
library(readr)
library(dplyr)
library(data.table)
library(tidyr)
library(tibble)
library(ggplot2)
library(lubridate)
library(tseries)
library(forecast)
library(prophet)
library(readr)
library(dplyr)
library(data.table)
library(tidyr)
library(tibble)
library(ggplot2)
library(lubridate)
library(tseries)
library(forecast)
library(prophet)
